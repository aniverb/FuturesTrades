# weight the predictors and responses to account for fitted variance model
intstar=rep(1,length(y))
ystar=y
xstar=x
for(i in 1:length(y)) {
ystar[i] = y[i]/sqrt(v[i])
xstar[i,]= x[i,]/sqrt(v[i])
intstar[i]=intstar[i]/sqrt(v[i])
}
reg.old.coef=reg.new$coefficients
reg.new=gee(ystar~intstar + ns(xstar[,"age"], 3)*xstar[,"sex"] + ns(xstar[,"age"], 3)*xstar[,"par_cat"] - 1, id=id,corstr=type)
}
return(list(gee=reg.new,vars=v)) #reg.new has covariances
}
x=as.matrix(NAdfPar[,c( "sex", "age", "par_cat")])
z=NAdfPar[,"age"] #used in getting cov mat
y=NAdfPar[,"wt"]
id=NAdfPar[,"id"]
iwls.gee = iwls(y,x,id,z, type="exchangeable")
summary(iwls.gee[[1]])
head(t)
1*"t"
x=as.matrix(NAdfPar[,c( "sex", "age", "par_cat")])
head(x[,"sex"])
head(as.numeric(x[,"sex"]))
iwls=function(y,x,id,z,type="independence",eps=1.0e-5,Kmax=10) {
#DOES GEE NOT ALLOW ONE TO USE OWN VAR TO WEIGHT? WHY BOTHER WRITING THIS FUNCTION?
# this function estimates the variances as a smooth function of predictors z, standardizes the y and x and then uses GEE to implement an iterative weighted least squares (IWLS) algorithm to fit a marginal model to clustered data. It iterates the regression and correlation model, but not the variance estimation. (i.e. variance does not change as function is being executed, but regression and correlation optimized)
#
reg.old.coef=rep(0, ncol(x)+1)
r = y-predict(reg.new<-lm(y~ns(x[,"age"], 3)*as.numeric(x[,"sex"]) + ns(x[,"age"], 3)*as.numeric(x[,"par_cat"])))
r2= r^2
K=1
while(sum((reg.old.coef - reg.new$coefficients)^2) > eps & K<Kmax) {
v=predict.glm(glm(r2 ~ ns(z, 3), family=Gamma(link="log")),type="response") #before had no spline
# model **covariances** using GEE
# weight the predictors and responses to account for fitted variance model
intstar=rep(1,length(y))
ystar=y
xstar=x
for(i in 1:length(y)) {
ystar[i] = y[i]/sqrt(v[i])
xstar[i,]= x[i,]/sqrt(v[i])
intstar[i]=intstar[i]/sqrt(v[i])
}
reg.old.coef=reg.new$coefficients
reg.new=gee(ystar~intstar + ns(xstar[,"age"], 3)*as.numeric(xstar[,"sex"]) + ns(xstar[,"age"], 3)*as.numeric(xstar[,"par_cat"]) - 1, id=id,corstr=type)
}
return(list(gee=reg.new,vars=v)) #reg.new has covariances
}
iwls.gee = iwls(y,x,id,z, type="exchangeable")
"t"*"t"
iwls=function(y,x,id,z,type="independence",eps=1.0e-5,Kmax=10) {
#DOES GEE NOT ALLOW ONE TO USE OWN VAR TO WEIGHT? WHY BOTHER WRITING THIS FUNCTION?
# this function estimates the variances as a smooth function of predictors z, standardizes the y and x and then uses GEE to implement an iterative weighted least squares (IWLS) algorithm to fit a marginal model to clustered data. It iterates the regression and correlation model, but not the variance estimation. (i.e. variance does not change as function is being executed, but regression and correlation optimized)
#
reg.old.coef=rep(0, ncol(x)+1)
r = y-predict(reg.new<-lm(y~ns(as.numeric(x[,"age"]), 3)*as.numeric(x[,"sex"]) + ns(as.numeric(x[,"age"]), 3)*as.numeric(x[,"par_cat"])))
r2= r^2
K=1
while(sum((reg.old.coef - reg.new$coefficients)^2) > eps & K<Kmax) {
v=predict.glm(glm(r2 ~ ns(z, 3), family=Gamma(link="log")),type="response") #before had no spline
# model **covariances** using GEE
# weight the predictors and responses to account for fitted variance model
intstar=rep(1,length(y))
ystar=y
xstar=x
for(i in 1:length(y)) {
ystar[i] = y[i]/sqrt(v[i])
xstar[i,]= x[i,]/sqrt(v[i])
intstar[i]=intstar[i]/sqrt(v[i])
}
reg.old.coef=reg.new$coefficients
reg.new=gee(ystar~intstar + ns(as.numeric(xstar[,"age"]), 3)*as.numeric(xstar[,"sex"]) + ns(as.numeric(xstar[,"age"]), 3)*as.numeric(xstar[,"par_cat"]) - 1, id=id,corstr=type)
}
return(list(gee=reg.new,vars=v)) #reg.new has covariances
}
x=as.matrix(NAdfPar[,c( "sex", "age", "par_cat")])
z=NAdfPar[,"age"] #used in getting cov mat
y=NAdfPar[,"wt"]
id=NAdfPar[,"id"]
iwls.gee = iwls(y,x,id,z, type="exchangeable")
head(d)
x=as.matrix(d[,c("age","age.sp6")])
head(x)
x$sex=factor(x$sex)
x[,"sex"]=factor(x[,"sex"])
x=as.matrix(d[,c("age","age.sp6", "sex")])
head(x)
x[,"sex"]=factor(x[,"sex"])
head(x)
typeof(x[,"sex"])
is.factor(x[,"sex"])
str(x[,"sex"])
x[,"sex"]=factor(d["sex"])
x[,"sex"]=factor(d[["sex"]])
head(x)
is.factor(x[,"sex"])
x[,3]=factor(d[["sex"]])
head(x)
is.factor(x[,"sex"])
load("nepal.anthro.rdata")
nepal.anthro$par_cat=rep(0, nrow(nepal.anthro))
nepal.anthro$par_cat[which(nepal.anthro$alive<=3)]=1
nepal.anthro$par_cat[which((nepal.anthro$alive>3)& (nepal.anthro$alive<=5))]=2
nepal.anthro$par_cat[which(nepal.anthro$alive>5)]=3
nepal.anthro$sex=factor(nepal.anthro$sex)
nepal.anthro$par_cat=factor(nepal.anthro$par_cat)
NAdfPar=nepal.anthro[c("id", "sex", "wt", "age",  "alive", "par_cat", "num")]
NAdfPar=na.omit(NAdfPar)
head(NAdfPar)
xt=as.matrix(NAdfPar[,c("sex", "age", "par_cat")])
head(xt)
d$sex=factor(d$sex)
is.factor(d$sex)
head(x=as.matrix(d[,c("age","age.sp6", "sex")]))
iwls=function(y,x,id,z,type="independence",eps=1.0e-5,Kmax=10) {
#DOES GEE NOT ALLOW ONE TO USE OWN VAR TO WEIGHT? WHY BOTHER WRITING THIS FUNCTION?
# this function estimates the variances as a smooth function of predictors z, standardizes the y and x and then uses GEE to implement an iterative weighted least squares (IWLS) algorithm to fit a marginal model to clustered data. It iterates the regression and correlation model, but not the variance estimation. (i.e. variance does not change as function is being executed, but regression and correlation optimized)
#
reg.old.coef=rep(0, ncol(x)+1)
r = y-predict(reg.new<-lm(y~ns(x[,"age"], 3)*x[,"sex"] + ns(x[,"age"], 3)*x[,"par_cat"]))
r2= r^2
K=1
while(sum((reg.old.coef - reg.new$coefficients)^2) > eps & K<Kmax) {
v=predict.glm(glm(r2 ~ ns(z, 3), family=Gamma(link="log")),type="response") #before had no spline
# model **covariances** using GEE
# weight the predictors and responses to account for fitted variance model
intstar=rep(1,length(y))
ystar=y
xstar=x
for(i in 1:length(y)) {
ystar[i] = y[i]/sqrt(v[i])
xstar[i,]= x[i,]/sqrt(v[i])
intstar[i]=intstar[i]/sqrt(v[i])
}
reg.old.coef=reg.new$coefficients
reg.new=gee(ystar~intstar + ns(xstar[,"age"], 3)*xstar[,"sex"] + ns(xstar[,"age"], 3)*xstar[,"par_cat"] - 1, id=id,corstr=type)
}
return(list(gee=reg.new,vars=v)) #reg.new has covariances
}
load("nepal.anthro.rdata")
nepal.anthro$par_cat=rep(0, nrow(nepal.anthro))
nepal.anthro$par_cat[which(nepal.anthro$alive<=3)]=1
nepal.anthro$par_cat[which((nepal.anthro$alive>3)& (nepal.anthro$alive<=5))]=2
nepal.anthro$par_cat[which(nepal.anthro$alive>5)]=3
#nepal.anthro$sex=factor(nepal.anthro$sex)
#nepal.anthro$par_cat=factor(nepal.anthro$par_cat)
NAdfPar=nepal.anthro[c("id", "sex", "wt", "age",  "alive", "par_cat", "num")]
NAdfPar=na.omit(NAdfPar)
xt=as.matrix(NAdfPar[,c("sex", "age", "par_cat")])
z=NAdfPar[,"age"] #used in getting cov mat
y=NAdfPar[,"wt"]
id=NAdfPar[,"id"]
iwls.gee = iwls(y,x,id,z, type="exchangeable")
load("nepal.anthro.rdata")
nepal.anthro$par_cat=rep(0, nrow(nepal.anthro))
nepal.anthro$par_cat[which(nepal.anthro$alive<=3)]=1
nepal.anthro$par_cat[which((nepal.anthro$alive>3)& (nepal.anthro$alive<=5))]=2
nepal.anthro$par_cat[which(nepal.anthro$alive>5)]=3
#nepal.anthro$sex=factor(nepal.anthro$sex)
nepal.anthro$par_cat=nepal.anthro$par_cat # factor before
NAdfPar=nepal.anthro[c("id", "sex", "wt", "age",  "alive", "par_cat", "num")]
NAdfPar=na.omit(NAdfPar)
xt=as.matrix(NAdfPar[,c("sex", "age", "par_cat")])
z=NAdfPar[,"age"] #used in getting cov mat
y=NAdfPar[,"wt"]
id=NAdfPar[,"id"]
iwls.gee = iwls(y,x,id,z, type="exchangeable")
sink("tp.txt")  #writ all output to file tp.txt
for (i in 1:5) print(i);
sink()
library(gee)
4^-.5
4^(-.5)
load("nepal.anthro.rdata")
nepal.anthro$par_cat=rep(0, nrow(nepal.anthro))
nepal.anthro$par_cat[which(nepal.anthro$alive<=3)]=1
nepal.anthro$par_cat[which((nepal.anthro$alive>3)& (nepal.anthro$alive<=5))]=2
nepal.anthro$par_cat[which(nepal.anthro$alive>5)]=3
#nepal.anthro$sex=factor(nepal.anthro$sex)
nepal.anthro$par_cat=nepal.anthro$par_cat # factor before
NAdfPar=nepal.anthro[c("id", "sex", "wt", "age",  "alive", "par_cat", "num")]
NAdfPar=na.omit(NAdfPar)
mOLS<-lm(wt ~  ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat), id=NAdfPar$id, data=NAdfPar)
library(geepack)
library(gee)
library(splines)
mOLS<-lm(wt ~  ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat), id=NAdfPar$id, data=NAdfPar)
mOLS<-lm(wt ~  ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat), data=NAdfPar)
v0<-predict(lm(mOLS$residuals^2~ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat), data=NAdfPar))
l1<-lm(wt ~ ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat),  data=NAdfPar, weights=1/v0 ) #WLS
res=NAdfPar$wt-predict(l1)
r2= res^2
v=predict.glm(glm(r2 ~ ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat),  data=NAdfPar, family=Gamma(link="log")), type="response")
x=model.matrix(~ ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat) , id=NAdfPar$id, data=NAdfPar)%*%v^-.5
x=model.matrix(~ ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat) , data=NAdfPar)%*%v^-.5
dim(v)
head(v)
V=diag(length(v))
dim(V)
head(V)
diag(V)=v
head(V[1:5,1:5])
x=model.matrix(~ ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat) , data=NAdfPar)
dim(x)
head(v)
x_star=x%*%v^-.5
x_star=x%*%V^-.5
x_star=V^-.5%*%x
wt_star=V^-.5%*%as.matrix(NAdfPar["wt"])
wls_gee <- gee(wt_star~ x_star, id=NAdfPar$id, corstr="exchangeable")
x_star[1:5,]
x[1:5,]
head(V[]),1:5
head(V[,1:5])
head(V^-.5[,1:5])
head((V^-.5)[,1:5])
2.399778^-.5
2.399778*^*-.5
2.399778%^%-.5
head((V^.5)[,1:5])
head((1%/%V^.5)[,1:5])
I=diag(length(v))
head((I%/%V^.5)[,1:5])
head((I%/%(V^.5))[,1:5])
head((I/(V^.5))[,1:5])
install.packages("expm", repos="http://R-Forge.R-project.org")
y
library(expm)
install.packages("expm", repos="http://R-Forge.R-project.org")
library(expm)
t=V%^%-.5
head(t[1:5,1:5])
diag(V)=v
head(V[1:5,1:5])
t=V%^%-.5
head(t[1:5,1:5])
t=V%^%(-.5)
head(t[1:5,1:5])
t=V%^%(2)
head(t[1:5,1:5])
2.39^2
t=V%^%(-1)
t=1/V
head(t[1:5,1:5])
t=V%^%(.5)
head(t[1:5,1:5])
V=diag(length(v))
diag(V)=v
W=V^-.5
head(W[1:5,1:5])
do.call(data.frame,lapply(W, function(x) replace(x, is.infinite(x),0)))
DT <- data.table(as.data.frame(W))
invisible(lapply(names(DT),function(.name) set(DT, which(is.infinite(DT[[.name]])), j = .name,value =0)))
install.packages("data.table")
library(data.table)
DT <- data.table(as.data.frame(W))
invisible(lapply(names(DT),function(.name) set(DT, which(is.infinite(DT[[.name]])), j = .name,value =0)))
DT[1:5,1:5]
W=DT
x_star=W%*%x
dim(x)
dim(W)
W=matrix(DT)
x_star=W%*%x
W=as.matrix(DT)
x_star=W%*%x
x_star[1:5,1:5]
x=model.matrix(~ ns(age, 3)*factor(sex) + ns(age, 3)*factor(par_cat) , data=NAdfPar)
x[1:5,1:5]
x=model.matrix(~  ns(age, 3)*factor(par_cat) , data=NAdfPar)
x[1:5,1:5]
x=model.matrix(~ ns(age, 3)*factor(sex)  , data=NAdfPar)
x[1:5,1:5]
length(v)
wt_star=W%*%as.matrix(NAdfPar["wt"])
head(wt_star)
head(NAdfPar["wt"])
out <- capture.output(wls_gee <- gee(wt_star~ x_star, id=NAdfPar$id, corstr="exchangeable"))
summary(wls_gee )
col2rgb(c("skyblue3", "pink3"))
pval(1.13,lower.tail=F)
pnorm(1.13,lower.tail=F)
?text
plot(c(5,6,0,-1,2))
plot(c(5,6,0,-1,2), type="l")
axis(1,at=c(1:5),labels=c("{1}","{6}","{1,6}","{3,6}","{1,3,6}"),tick=FALSE)
plot(c(5,6,0,-1,2), type="l", xaxt="n")
axis(1,at=c(1:5),labels=c("{1}","{6}","{1,6}","{3,6}","{1,3,6}"),tick=FALSE)
tv_pv_combM$Date[0]
tv_pv_combM$Date[1]
tv_pv_combM$Date[1][6:length(tv_pv_combM$Date[1])]
trun(tv_pv_combM$Date[1], c( "secs"))
trunc(tv_pv_combM$Date[1], c( "secs"))
?axis
c(1,4, 6, 9, 0) %in% c(0,9)
c(1,4, 6, 9, 0) %in% c(4,9)
t=rep(NA, length(at))
t=rep(NA, 10
)
t[c(1,4,6)]=tv_pv_combM$Date[1:3]
t
tv_pv_combM$Date[1:3]
t=rep(NA, 10
)
t[c(1,4,6)]=as.vector(tv_pv_combM$Date[1:3])
t
tv=read.table("trades_pivot_2016-11-18.txt", sep="\t", header=T)
#head(tv)
pv=read.table("trades_pivot_vol_2016-11-18.txt", sep="\t", header = T)
#head(pv)
trade_data=read.table("trades_count_regression_2016-11-18.txt", sep="\t", header=T)
tv=read.table("trades_pivot_2016-11-18.txt", sep="\t", header=T)
#head(tv)
pv=read.table("trades_pivot_vol_2016-11-18.txt", sep="\t", header = T)
#head(pv)
trade_data=read.table("trades_count_regression_2016-11-18.txt", sep="\t", header=T)
setwd("C:\\Users\\aniverb\\Documents\\Grad_School\\JHU\\700")
tv=read.table("trades_pivot_2016-11-18.txt", sep="\t", header=T)
#head(tv)
pv=read.table("trades_pivot_vol_2016-11-18.txt", sep="\t", header = T)
#head(pv)
trade_data=read.table("trades_count_regression_2016-11-18.txt", sep="\t", header=T)
tv_pv_comb=cbind(tv[,1:16], pv[,4:16], tv[17], pv[17])
head(tv_pv_comb)
tv_pv_comb["Day"]=trade_data["Day"]
products=c(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
dfCors=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", xaxt="n")
axis(1, at=at, labels=labs, tick=F)
}
products=c(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
dfCors=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", xaxt="n")
axis(1, at=at, labels=labs, tick=F)
}
products=c(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", xaxt="n")
axis(1, at=at, labels=labs, tick=F)
}
head(tv_pv_combM$Day)
products=c(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
tv_pv_combS=subset(tv_pv_comb, ProductName==products[1][1])
head(tv_pv_combS)
tv_pv_combM=subset(tv_pv_combS, Maturity==products[1][1])
head(tv_pv_combM)
tv_pv_combM=subset(tv_pv_combS, Maturity==products[1][2])
head(tv_pv_combM)
products[1][2]
products[1]
products=list(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
tv_pv_comb=subset(tv_pv_comb, Maturity==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
head(tv_pv_combM)
tail(tv_pv_combM)
products=list(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", pch=16, xaxt="n")
axis(1, at=at, labels=labs, tick=F)
}
for (product in products){
print product}
for (product in products){
print(product)}
for (product in products){
print(product[1])
print(product[2])}
tv_pv_comb=subset(tv_pv_comb, Maturity==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
head(tv_pv_combM)
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
head(cors)
head(tv_pv_combM)
tv_pv_comb=subset(tv_pv_comb, Maturity==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
head(tv_pv_combM)
tv_pv_comb=cbind(tv[,1:16], pv[,4:16], tv[17], pv[17])
tv_pv_comb["Day"]=trade_data["Day"]
tv_pv_comb=subset(tv_pv_comb, Maturity==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
head(tv_pv_combM)
products
tv_pv_comb=subset(tv_pv_comb, ProductName==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
head(tv_pv_combM)
products[[1]][1]
products[[1]][2]
tv_pv_comb=cbind(tv[,1:16], pv[,4:16], tv[17], pv[17])
tv_pv_comb["Day"]=trade_data["Day"]
head(tv_pv_comb)
tv_pv_combS=subset(tv_pv_comb, ProductName==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
head(tv_pv_comb)
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
head(cors)
tail(cors)
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", pch=16, xaxt="n")
plot(tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", pch=16, xaxt="n")
products=list(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
#print(product[1])
#print(product[2])}
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", pch=16, xaxt="n")
axis(1, at=at, labels=labs, tick=F)
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
}
products=list(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
#print(product[1])
#print(product[2])}
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, ylim=c(-1,1), xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", pch=16, xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
axis(1, at=at, labels=labs, tick=F)
}
tv_pv_comb=cbind(tv[,1:16], pv[,4:16], tv[17], pv[17])
tv_pv_comb["Day"]=trade_data["Day"]
products=list(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
tv_pv_combS=subset(tv_pv_comb, ProductName==products[[1]][1])
tv_pv_combM=subset(tv_pv_combS, Maturity==products[[1]][2])
head(tv_pv_comb)
dim(tv_pv_comb)
dim(tv_pv_combM)
products=list(c('NQ', "2016-12-16"), c('ZC', '2016-07-14'))
for (product in products){
#print(product[1])
#print(product[2])}
tv_pv_combS=subset(tv_pv_comb, ProductName==product[1])
tv_pv_combM=subset(tv_pv_combS, Maturity==product[2])
plot(tv_pv_combM$Day, tv_pv_combM$DayTradeTotal, xlab="Day", ylab="DayTradeTotal", main=paste(product[1], "Maturity:", product[2]), col="skyblue", pch=16, xaxt="n")
at=seq(min(tv_pv_combM$Day), max(tv_pv_combM$Day), 1)
labs=rep(NA, length(at))
labs[which(at%in%tv_pv_combM$Day)]=as.vector(tv_pv_combM$Date)
axis(1, at=at, labels=labs, tick=F)
cors=apply(tv_pv_combM, 1, function(x){cor(as.numeric(x[4:16]), as.numeric(x[17:29]), use="na.or.complete")})
tv_pv_combM=data.frame(tv_pv_combM[c("Date", "Day", "DayTradeTotal")], cors=as.vector(cors))
plot(tv_pv_combM$Day, tv_pv_combM$cors, ylim=c(-1,1), xlab="Day", ylab="correlation coefficient", main=paste(product[1], "Maturity:", product[2]), xaxt="n")
axis(1, at=at, labels=labs, tick=F)
}
t=list(c(1,2),c("A", "2016"))
c(1,2)%in%t
1%in%t
1%in%t[[0]]
1%in%t[[1]]
exp(1)^.68
2^.984
.05/10^6
qchisq(5e-08,1, lower.tail = F)
