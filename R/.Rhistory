sums=list()
for (i in 1:4){
sums[[i]]=apply(combs[[i]], 1, sum)
}
sums
tPlus=c()
for (i in 1:4){
tPlus[[i]]=apply(combs[[i]], 1, sum)
}
table(tPlus)
tPlus
tPlus=c()
for (i in 1:4){
tPlus[i]=apply(combs[[i]], 1, sum)
}
table(tPlus)
tPlus
apply(combs[[i]], 1, sum)[i]
apply(combs[[1]], 1, sum)
apply(combs[[2]], 1, sum)
1+1
tPlus=c()
tPlus[1]=apply(combs[[1]], 1, sum)
tPlus[1]=2
tPlus=list()
for (i in 1:4){
tPlus[[i]]=apply(combs[[i]], 1, sum)
}
table(tPlus)
str(tPlus)
as.numeric(tPlus)
as.vector(tPlus)
array(1,3,4)
array(c(1,3,4))
c=array()
c[1]=c(1,3,4)
c[1:3]=c(1,3,4)
c
tPlus1=combinations(4,1)
tPlus2=combinations(4,2)
tPlus3=combinations(4,3)
tPlus4=combinations(4,4)
combs=list(tPlus1, tPlus2, tPlus3, tPlus4)
tPlus=c()
for (i in 1:4){
ranks=apply(combs[[i]], 1, sum)
tPlus[i:length(ranks)]=ranks
}
table(tPlus)
tPlus
apply(combs[[2]], 1, sum)
length(apply(combs[[2]], 1, sum))
tPlus=c()
count=1
for (i in 1:4){
ranks=apply(combs[[i]], 1, sum)
n=length(ranks)
tPlus[count:(count+n)]=ranks
count=count+n
}
table(tPlus)
tPlus
combs
tPlus=c()
count=1
for (i in 1:4){
ranks=apply(combs[[i]], 1, sum)
n=length(ranks)
tPlus[count:(count+n-1)]=ranks
count=count+n
}
table(tPlus)
tPlus
tPlusC=table(tPlus)
tPlusCn=length(tPlus)
tPlusC/tPlusCn
sum(tPlusC/tPlusCn)
=combinations(4,0)
combinations(4,0)
combinations(4,4)
distr=tPlusC/tPlusCn
distr
Eemp=sum(1:10*distr)
E=n*(n + 1)/4
Eemp
E
n=4
E=n*(n + 1)/4
E
tPlus
tPlus=c(0,tPlus)
tPlus
binom.test(0,15)
0:10
india[2,1]
n=est+india[2,1]
phat=est/n
qbinom(.025, n, phat)
qbinom(.975, n, phat)
est=(sum(india[1,])*india[2,1])/india[1,2]-india[2,1]
est
n=est+india[2,1]
phat=est/n
qbinom(.025, n, phat)
qbinom(.975, n, phat)
```
n
phat
qbinom(.025, n, phat)
qbinom(.975, n, phat)
qbinom(.05, 15, .5)
qbinom(.025, 15, .5)
qbinom(.975, 15, .5)
ceiling(.6 )
est=ceiling(sum(india[1,])*india[2,1])/india[1,2]-india[2,1]
est
est=ceiling(sum(india[1,])*india[2,1])/india[1,2]-india[2,1])
est=ceiling((sum(india[1,])*india[2,1])/india[1,2]-india[2,1])
est
n=est+india[2,1]
phat=est/n
qbinom(.025, n, phat)
qbinom(.975, n, phat)
n
solve(1535/741-1,710)
india
est=ceiling(solve(1535/741-1,710))
india[2,2]=est
india
apply(india,1, sum)
apply(india,2, sum)
india[,1]/apply(india,1, sum)
india[1,]/apply(india,1, sum)
india[2,2]=662.6071
india[,1]/apply(india,1, sum)
india[1,]/apply(india,2, sum)
n1,n2=apply(india,1, sum)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ps=seq(0,1,.005)
length(ps)
source('~/.active-rstudio-document', echo=TRUE)
8*p^7*(1-p)
8*.5^7*(1-.5)
dbinom(7,8,.5)
india
redness=table(OS[,2:3]$Redness)
redness
fisher.test(redness)$p.value
chisq.test(redness)$p.value
chisq.test(redness, simulate.p.value=T)$p.value
chisq.test(itchiness, simulate.p.value=T, B = 2000)$p.value
itchiness=table(OS[,2:3]$Itching)
chisq.test(itchiness, simulate.p.value=T, B = 2000)$p.value
chisq.test(itchiness, simulate.p.value=T, B = 2000)$p.value
chisq.test(itchiness, simulate.p.value=T, B = 2000)$p.value
chisq.test(redness, simulate.p.value=T)$p.value
chisq.test(redness, simulate.p.value=T)$p.value
chisq.test(redness, simulate.p.value=T, B = 4000)$p.value
chisq.test(redness, simulate.p.value=T, B = 4000)$p.value
chisq.test(redness, simulate.p.value=T, B = 4000)$p.value
chisq.test(redness, simulate.p.value=T, B = 10000)$p.value
chisq.test(redness, simulate.p.value=T, B = 10000)$p.value
chisq.test(redness, simulate.p.value=T, B = 10000)$p.value
chisq.test(redness, simulate.p.value=T, B = 100000)$p.value
chisq.test(redness, simulate.p.value=T, B = 100000)$p.value
chisq.test(redness, simulate.p.value=T, B = 100000)$p.value
set.seed(12-18-20)
chisq.test(redness, simulate.p.value=T, B = 100000)$p.value
set.seed(12-18-20)
chisq.test(itchiness, simulate.p.value=T, B = 100000)$p.value
x=(21-13)^2/(21+13)
1-pchisq(x,1)
x
matrix(c(35, 13, 21, 249), 2)
mcnemar.test(review, correct=F)$p.value
?pchisq
choose(6,2)
6+7
6*7
india
matrix(c(218,227, 278, 277), 2)
diff
x=sum(diff>0)
n=length(diff)
x
n
2*(dbinom(0, 18, .5)+dbinom(1, 18, .5)+dbinom(2, 18, .5))
binom.test(2,18)
sumc(218+227, 278+277)
sum(218+227, 278+277)
sum(218+227)/1000
binom.test(sum(218+227),1000)
binom.test(sum(fCsC[,1]),1000)
tab=matrix(c(46, 1,25, 99, 54, 10, 125, 110), 2)
chisq.test(tab)
tab=matrix(c(46, 1,25, 99, 54, 10, 125, 110), 2)
fisher.test(tab)
fisher.test(tab)$p.value
chisq.test(tab)$p.value
fCsC=matrix(c(218,227, 278, 277), 2)
chisq.test(fCsC
)
fCsC=matrix(c(218,227, 278, 277), 2)
chisq.test(fCsC, lower=F)
chisq.test(fCsC, correct=F)
218+227+278+277
p1=218/(218+227) #treatment
p2=278/(278+277)  #control
p=(218+278)/(218+227+278+277)
se=sqrt(p*(1-p)*(1/(218+227)+1/(278+277)))
TS=(p1-p2)/se
pnorm(TS)*2
c(218+227, 278+277)
p1=(218+227)/1000 #treatment
p2=(278+277)/1000  #control
p=.5
se=sqrt(p*(1-p)*(1/1000+1/1000))
TS=(p1-p2)/se
pnorm(TS)*2
se=sqrt(p*(1-p)*(1/1000)*2)
TS=(p1-p2)/se
pnorm(TS)*2
pnorm(TS)
p1=218/(218+227) #treatment
p2=278/(278+277)  #control
p=(218+278)/(218+227+278+277)
se=sqrt(p*(1-p)*(1/(218+227)+1/(278+277)))
TS=(p1-p2)/se
pnorm(TS)*2
pchisq(0.3436926,1,lower.tail=F)
pchisq(0.3436926,1,lower.tail=F)*2
dat <- matrix(c(44, 77, 56, 43), 2)
chisq.test(dat)
pchisq(8.96, 1, lower.tail = FALSE)
pchisq(8.96, 1, lower.tail = FALSE)*2
chisq.test(dat, correct=F)
pchisq(17.36,1)
pchisq(17.36,1, lower.tail = F)
mcnemar.test(matrix(c(794, 86, 150, 570), 2),
correct = FALSE)
binom.test(1,9)
binom.test(1,9,alternative = "o")
binom.test(1,9,alternative = "l")
binom.test(86,86+150,alternative = "l")
binom.test(86,86+150,alternative = "l")$p.value*2
mastecT
transpose(mastecT)
t(mastecT)
binom.test(1,20,alternative = "l")
binom.test(1,20)
pchisq(67:99354,3, lower.tail = F)
pchisq(67.99354,3, lower.tail = F)
chisq.test(rbind(bc[1,], bc[3,]), correct=F)$p.value
chisq.test(bc[2:3,], correct=F)$p.value
sum(rabbit$After-rabbit$Before>0)
sum(rabbit$Before-rabbit$After>0)
binom.test(2,17)
binom.test(15,17)$p.value
table(OS[,2:3]$Itching)
table(OS[,2:3]$Redness)
chisq.test(redness[0:2])$p.value
chisq.test(redness[1:2])$p.value
redness[1:2]
binom.test(12,12+9)
chisq.test(redness[1:2], correct=F)$p.value
prop.test(12,12+9)$p.value
phat=9/21
ts=phat/sqrt(phat*(1-phat)/21)
ts
2*(1-pnorm(ts))
ts=(phat-.5)/sqrt(phat*(1-phat)/21)
2*(1-pnorm(ts))
ts
2*(pnorm(ts))
ps=seq(0,1,.001)
n=apply(india,1, sum)
lik=dbinom(794,n[1],ps)*dbinom(741,n[2],ps)/dbinom(794+741,n[1]+n[2],ps) #assuming p1=p2
plot(ps, lik/max(lik), type="l", xlab="p", ylab="likelihood")
head(lik)
n[2]
n[1]
sum(india)
x=dbinom(794+741,n[1]+n[2],ps)
head(x)
tail(x)
794+741
dbinom(1535, 2908,.2)
dbinom(1535, 2908,.5)
dbinom(5, 10,.2)
1535/2908
sample(10)
?sample
cont=c(4.6, 7.3, 4.5, 8.4, 7.5, 3.3, 8.7, 5.7, 8.5, 6.6)
treat=c(7.1, 5.6, 7.2, 7.1,8.1,4.5, 4.3,8.2, 9, 6.6)
diff=cont-treat
t.test(diff, alt= "two.sided")
st=sd(diff)
d=mean(diff)
d
power.t.test(delta=d, sd=st, alternative="two.sided", power=.9)
power.t.test(delta=d, sd=st, power=.9)
power.t.test(delta=d, sd=st, alternative="one.sided", power=.9)
power.t.test(delta=-d, sd=st, alternative="one.sided", power=.9)
power.t.test(delta=d, sd=st, alternative="two.sided", power=.6)
1558.906/2
power.t.test(delta=abs(d), sd=st, alternative="one.sided", power=.9)
power.t.test(delta=abs(d), sd=st, alternative="one.sided", power=.8)
Obstetric=read.csv("C:\\Users\\aniverb\\Documents\\Grad_School\\JHU\\140.652\\HW\\hw8\\set8_prob1.csv", header=F)
n=ncol(Obstetric)
SUD=as.numeric(Obstetric[1,2:n])
control=as.numeric(Obstetric[2,2:n])
data=c(SUD,control)
n=length(data)
n
data
Obstetric
SUD=as.numeric(Obstetric[1,2:n-2])
nc=ncol(Obstetric)
SUD=as.numeric(Obstetric[1,2:(nc-2)])
control=as.numeric(Obstetric[2,2:nc])
data=c(SUD,control)
n=length(data)
n
data
rankSum=n*(n+1)/2
rankSum
data.frame(data=sort(data), rank=1:n)
data=sort(data, return.index=T)
data=sort(data, index.return=T)
data.frame(rank=1:n, ix=data$ix, data=data$x,)
data.frame(rank=1:n, ix=data$ix, data=data$x)
nSG=length(2:(nc-2))
nSG
dataDF$rank[dataDF$ix=1:nSG]
dataDF$rank[dataDF$ix==1:nSG]
dataDF=data.frame(rank=1:n, ix=data$ix, data=data$x)
dataDF$rank[dataDF$ix==1:nSG]
dataDF$ix==1:nSG
1:nSG %in% dataDF$ix
dataDF$ix %in% 1:nSG
dataDF$rank[dataDF$ix %in% 1:nSG ]
dataDF=data.frame(rank=1:n, ix=data$ix, dataS=data$x)
dataDF$rank[dataDF$ix %in% 1:nSG ]
rankSG=sum(dataDF$rank[dataDF$ix %in% 1:nSG ])
rankSG
sample(1:10, 10)
sample(1:10, 5)
Obstetric=read.csv("C:\\Users\\aniverb\\Documents\\Grad_School\\JHU\\140.652\\HW\\hw8\\set8_prob1.csv", header=F)
nc=ncol(Obstetric)
SUD=as.numeric(Obstetric[1,2:(nc-2)])
control=as.numeric(Obstetric[2,2:nc])
data=c(SUD,control)
n=length(data)
rankSum=n*(n+1)/2
nSG=length(2:(nc-2))
dataS=sort(data, index.return=T)
dataDF=data.frame(rank=1:n, ix=dataS$ix, dataS=dataS$x)
rankSG=sum(dataDF$rank[dataDF$ix %in% 1:nSG ])
rankSG
getRank=function(data){
n=length(data)
data=sample(data, n)
nSG=length(2:(nc-2))
dataS=sort(data, index.return=T)
dataDF=data.frame(rank=1:n, ix=dataS$ix, dataS=dataS$x)
rankSG=sum(dataDF$rank[dataDF$ix %in% 1:nSG ])
return(rankSG)
}
simRanks=replicate(10000, getRank(data))
rankBG=rankSum-rankSG
sum(simRanks<=rankSG)/10000
rankSumBG=rankSum-simRanks
simRanksBG=rankSum-simRanks
sum(simRanksBG>=rankBG)/10000
pval=sum(simRanks<=rankSG)/10000+sum(simRanksBG>=rankBG)/10000
MCn=100000
simRanks=replicate(MCn, getRank(data))
pval=sum(simRanks<=rankSG)/MCn+sum(simRanksBG>=rankBG)/MCn
simRanksBG=rankSum-simRanks
sum(simRanks<=rankSG)/MCn
simRanksBG=rankSum-simRanks
sum(simRanksBG>=rankBG)/MCn
pval=sum(simRanks<=rankSG)/MCn+sum(simRanksBG>=rankBG)/MCn
wilcox.test(SUD, control, exact = FALSE, correct=F)$p.value
wilcox.test(SUD, control, exact = T, correct=F)$p.value
MCn=10000
simRanks=replicate(MCn, getRank(data))
simRanksBG=rankSum-simRanks
pval10k=sum(simRanks<=rankSG)/MCn+sum(simRanksBG>=rankBG)/MCn
MCn=100000
set.seed(12-22-16)
simRanks=replicate(MCn, getRank(data))
simRanksBG=rankSum-simRanks
pval100k=sum(simRanks<=rankSG)/MCn+sum(simRanksBG>=rankBG)/MCn
MCn=1000000
set.seed(12-22-16)
simRanks=replicate(MCn, getRank(data))
simRanksBG=rankSum-simRanks
pval1M=sum(simRanks<=rankSG)/MCn+sum(simRanksBG>=rankBG)/MCn
t=c(1:5)
t
samples(t,5)
sample(t,5)
sample(t,5)
t2=sample(t,5)
t2
t2[1:2]
id=t2[1:2]
-id
1:5[id]
t[id]
t[-id]
id=t2[3:4]
id
id=t2[5:6]
if
id
id=t2[4:5]
id
t[id]
t[-id]
which(t not %in% id)
which(t %in% id)
which(id %in% t)
id
t
t %in% id
t !%in% id
!(t %in% id)
c("a", "d", "g", "e", "y")[t %in% id]
c("a", "d", "g", "e", "y")[!(t %in% id)]
c("a", "d", "g", "e", "y")[id]
c("a", "d", "g", "e", "y")[-id]
test=head(trade_data)
setwd("C:/Users/aniverb/Documents/Grad_School/JHU/700")
trade_data=read.table("trades_count_regression_2016-11-18.txt", header=T)
test=head(trade_data)
test
test=head(trade_data,5)
test
test[-id,]
test[id,]
t2
t2=c(2,3,5,1,4)
t2=c(4,2,5,1,3)
id=t2[1:2]
id
test[id,]
test[-id,]
test[-id,]$Day
test[-id,]$TradeTotBCTrans
dim(trade_data)
n=dim(trade_data)[1]/2
n
reg_data=trade_data[1:n, ]
trade_data=trade_data[order(trade_data$Date),]
reg_data=trade_data[1:n, ]
set.seed(12-1-16)
train_id=sample(1:n, n)[1:floor(n/2)]
head(train_id)
length(train_id)
train=reg_data[train_id, ]
test=reg_data[-train_id, ]
head(train)
set.seed(12-1-16)
train_id=sample(1:n, n)[1:floor(n/2)]
train=reg_data[train_id, ]
head(train_id)
head(train)
head(trade_data)
model1 <- gam(TradeTotBCTrans ~ s(TimeToMaturity, bs="cr") + s(DayofMonth, bs="cr") + s(Day, bs="cr") + factor(ProductType) + factor(ProductName) + factor(DayOfTheWeek), family=gaussian(), data = train, method="GCV.Cp", select=TRUE)
library(mgcv)
model1 <- gam(TradeTotBCTrans ~ s(TimeToMaturity, bs="cr") + s(DayofMonth, bs="cr") + s(Day, bs="cr") + factor(ProductType) + factor(ProductName) + factor(DayOfTheWeek), family=gaussian(), data = train, method="GCV.Cp", select=TRUE)
trainPred=model1$fitted.values
plot(train$TimeToMaturity, train$TradeTotBCTrans, pch=20)
points(train$TimeToMaturity, trainPred, col="red", pch=20)
testPred <- predict(model1, test)
plot(test$TimeToMaturity, test$TradeTotBCTrans, pch=20)
points(test$TimeToMaturity, testPred, col="red", pch=20)
c=c()
append(c,1,1)
c
c=c(2)
append(c,1,1)
c
c=c()
c=append(c,1,1)
c
c=c()
length(c)
append(c,1,length(c))
c
c=append(c,1,length(c))
c
unique(c("b","a","b"))
unique(train$ProductName)
p=unique(train$ProductName)
length(p)
ap=c()
append(ap,p,length(ap))
p2=as.character(p)
p
p2=as.vector(p)
p2
p2=as.character(p)
p2
rep(1:3,3)
2200/140
replicate(sample(1:5, 5),10)
rep(sample(1:5, 5),10)
